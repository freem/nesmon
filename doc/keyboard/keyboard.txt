Hardware Keyboard Information
=============================
As nesmon is a machine language monitor, having a keyboard is the best option
for input. However, unlike the PC world, there are a few competing keyboard
styles on the NES/Famicom.

Family BASIC Keyboard
=====================
The official keyboard.
Only available in Japan and only easily usable on a Famicom.
Less keys than a regular keyboard, but allows for entering Japanese Kana.

More information in keyboard_familybasic.txt

Subor Keyboard
==============
Unofficial keyboard found with cloned systems.

More information in keyboard_subor.txt

Other Keyboards
===============
FCEUX's source code makes reference to a "pec586kb".
I would document this, but the same source has this comment:
"TODO: check all keys, some of the are wrong".

Would rather not spread wrong information further.

Comparing Family BASIC Keyboard and Subor Keyboard
==================================================
The matrix for each keyboard is highly incompatible, but two similarities exist,
both on Row 3.

Exact Matches
-------------
I (Column 0, Row 3)

Similar
-------
F5
    Family BASIC: Column 0, Row 3
  Subor Keyboard: Column 1, Row 3

================================================================================
Writing Keyboard Drivers
================================================================================
Most of these notes are only valid for hardware keyboard support. The software
keyboard is supported by default and has its own set of routines (due to the
use of a regular joypad).

Keyboard Driver Identification
==============================
Each nesmon keyboard driver requires a signature. This signature consists of a
nine character string ("KB_xxxxxx"), followed by a single byte (representing the
driver version number).

Subor has a $00 byte at the end of its string; this will be changed if
alternate versions of the Subor keyboard are found/supported.

Keyboard Driver Jump Table
==========================
Each keyboard driver must define a jump table containing pointers to various
routines. If a driver does not handle a routine, set the value to $0000 and
it will be skipped.

+--------------+---------------------------------------------------------------+
| Routine Name | Description                                                   |
+--------------+---------------------------------------------------------------+
|Reset         | Resets keyboard status
|GetKeys       | Read Input (raw)
+--------------+---------------------------------------------------------------+
|ShowBoard     | Show Keyboard Display (currently only used by SoftKB)
|HideBoard     | Hide Keyboard Display (currently only used by SoftKB)
+--------------+---------------------------------------------------------------+

Keyboard Variables
==================
* hardkbJumpTable
A pointer to the currently enabled hardware keyboard's jump table.

* hardkbShift
Hardware keyboard Shift key status.

xxxx xx00
|_____|||
   |   ||__ Left Shift
   |   |___ Right Shift
   |_______ unused

* hardkbCtrl
Hardware keyboard Control key status.
Not all keyboards will have multiple Ctrl keys.

xxxx xx00
|_____|||
   |   ||__ Left Control (Family BASIC KB's only Control key)
   |   |___ Right Control
   |_______ unused

* hardkbAltGr
Hardware keyboard Alt/Graphics key status.

xxxx x000
|____||||
  |   |||__ Left Alt
  |   ||___ Right Alt
  |   |____ Graphics Key (Family BASIC KB only)
  |________ unused

* kardkbLockStatus
Hardware keyboard lock mode status (e.g. caps lock, num lock, scroll lock).
Keyboards vary wildly here.

xxxx 0000
|__| ||||
  |  ||||__ Caps Lock (non-Family BASIC keyboards only)
  |  |||___ Num Lock (non-Family BASIC keyboards only)
  |  ||____ Scroll Lock (non-Family BASIC keyboards only)
  |  |_____ Kana Lock (Family BASIC keyboard only)
  |________ unused

* hardkbKeyStatus
Hardware keyboard overall key status (direct reads). This also varies between
keyboards. Please see the specific keyboard documentation for each keyboard.
